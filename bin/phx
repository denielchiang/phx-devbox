#!/bin/bash
set -e

##########################################################
# Function Definitions - All functions must be defined before use
##########################################################

# Show help information
show_help() {
    echo "Usage: phx [options] [commands]"
    echo ""
    echo "Options:"
    echo "  -v, --phx, --phoenix-version   Specify Phoenix framework version"
    echo "  -e, --ex, --elixir-version    Specify Elixir version (default: latest)"
    echo "  -o, --erl, --erlang-version   Specify Erlang version (default: latest)"
    echo "  -p, --path                    Specify path for project creation"
    echo "  -h, --help                    Show this help message"
    echo ""
    echo "Command examples:"
    echo "  phx new my_app        # Create a new Phoenix application"
    echo "  phx new my_app --live # Create a new Phoenix LiveView application"
    echo "  phx --path /path/to/my_project new my_app  # Create a new application in a specific path"
    echo "  phx deps.get          # Get dependencies"
    echo "  phx phx.server        # Start Phoenix server"
    echo "  phx iex               # Start IEx shell"
    echo "  phx iex.phx           # Start IEx and load Phoenix application (iex -S mix phx.server)"
    echo "  phx test               # Run tests"
    echo "  phx ecto.create       # Create database"
    echo "  phx ecto.migrate      # Run migrations"
    echo "  phx ecto.setup        # Initialize database (create, load defaults)"
    echo "  phx ecto.reset        # Reset database (drop and recreate)"
    echo "  phx routes             # Show all routes"
    echo "  phx bash               # Enter container's bash"
    echo "  phx update-versions    # Update .tool-versions file"
    echo "  phx debug-path         # Debug configuration file paths"
    echo ""
    echo "All mix and iex commands can be used directly"
}

# Check Docker Compose and set the correct command
check_docker_compose() {
    local docker_compose_found=false
    
    if command -v docker-compose &> /dev/null; then
        # Traditional docker-compose command
        docker_compose_cmd="docker-compose"
        docker_compose_found=true
    elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
        # New docker compose subcommand
        docker_compose_cmd="docker compose"
        docker_compose_found=true
    fi
    
    if [ "$docker_compose_found" = false ]; then
        echo "Error: Docker Compose not found. Please make sure Docker Desktop or Docker Engine is installed with Docker Compose functionality."
        exit 1
    fi
    
    # Check if you have permission to run Docker
    if ! docker info &>/dev/null; then
        echo "Warning: Unable to connect to Docker. Please make sure Docker is running and you have permission to execute Docker commands."
        echo "If you are not in the docker group, you may need to run:"
        echo "  sudo usermod -aG docker $(whoami) && newgrp docker"
        exit 1
    fi
    
    echo "Using Docker Compose command: $docker_compose_cmd"
}

# Get current user's UID and GID
setup_user_permissions() {
    # Get user's UID and GID
    export CURRENT_UID=$(id -u)
    export CURRENT_GID=$(id -g)
    
    echo "Container will use user ID: $CURRENT_UID and group ID: $CURRENT_GID"
}

# Update .tool-versions file
update_tool_versions() {
    local target_dir="$1"
    
    # Get actual Erlang and Elixir versions from Docker container
    local actual_erlang_version
    local actual_elixir_version
    
    # If ERLANG_VERSION or ELIXIR_VERSION is "latest", extract the actual version from the Docker container
    if [[ "$ERLANG_VERSION" == "latest" || "$ELIXIR_VERSION" == "latest" ]]; then
        echo "Getting actual Erlang and Elixir versions from Docker container..."
        
        # Run a temporary container to extract version information
        local versions_output
        versions_output=$(run_with_safe_compose run --rm phoenix bash -c "echo Erlang \$(cat /usr/local/lib/erlang/releases/*/OTP_VERSION) && echo Elixir \$(elixir --version | grep Elixir | cut -d' ' -f2)" 2>/dev/null)
        
        # Extract versions from output
        actual_erlang_version=$(echo "$versions_output" | grep Erlang | cut -d' ' -f2)
        actual_elixir_version=$(echo "$versions_output" | grep Elixir | cut -d' ' -f2)
        
        # Use actual versions if available, otherwise fall back to defaults
        if [[ -z "$actual_erlang_version" ]]; then
            echo "Warning: Could not get Erlang version from Docker container, using default 27.0.0"
            actual_erlang_version="27.0.0"
        fi
        
        if [[ -z "$actual_elixir_version" ]]; then
            echo "Warning: Could not get Elixir version from Docker container, using default 1.16.0"
            actual_elixir_version="1.16.0"
        fi
    else
        # Use specified versions
        actual_erlang_version="$ERLANG_VERSION"
        actual_elixir_version="$ELIXIR_VERSION"
    fi
    
    # Create .tool-versions file
    cat > "$target_dir/.tool-versions" << EOF
erlang $actual_erlang_version
elixir $actual_elixir_version
EOF
    
    # Show the file contents for confirmation
    echo "Creating .tool-versions file with actual versions..."
    echo "Created .tool-versions file with versions: Erlang $actual_erlang_version, Elixir $actual_elixir_version"
}

# Check availability of specified versions
check_versions_availability() {
    local continue_anyway=false
    
    # Check Phoenix version availability
    if [[ "$PHOENIX_VERSION" != "latest" && "$PHOENIX_VERSION" != "" ]]; then
        echo "Checking Phoenix $PHOENIX_VERSION availability..."
        if ! curl --silent --fail "https://hex.pm/api/packages/phoenix" | grep -q "\"$PHOENIX_VERSION\""; then
            echo "Warning: Phoenix version $PHOENIX_VERSION may not be available."
            echo "Available Phoenix versions (recent):"
            curl --silent "https://hex.pm/api/packages/phoenix" | grep -o '"[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*[^"]*"' | sort -Vr | head -5 | sed 's/"//g' | sed 's/^/  - /'
            echo "Would you like to continue anyway? (yes/no)"
            read -r choice
            if [[ "$choice" != "yes" && "$choice" != "y" ]]; then
                echo "Operation cancelled by user."
                exit 1
            fi
            continue_anyway=true
        else
            echo "Phoenix $PHOENIX_VERSION is available."
        fi
    fi
    
    # Check Elixir version availability
    if [[ "$ELIXIR_VERSION" != "latest" ]]; then
        local elixir_tags_url="https://hub.docker.com/v2/repositories/library/elixir/tags?page_size=100"
        echo "Checking Elixir $ELIXIR_VERSION availability..."

        # For Elixir, we need to check if the version exists in Docker Hub
        if ! curl --silent "$elixir_tags_url" | grep -q "\"name\":\"$ELIXIR_VERSION" && ! curl --silent "$elixir_tags_url" | grep -q "\"name\":\"$ELIXIR_VERSION-otp"; then
            echo "Warning: Elixir version $ELIXIR_VERSION may not be available."
            echo "Available Elixir versions (recent):"
            curl --silent "$elixir_tags_url" | grep -o '"name":"[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*[^"]*"' | sort -Vr | head -5 | sed 's/"name":"//g' | sed 's/"//g' | sed 's/-otp.*//g' | uniq | sed 's/^/  - /'
            
            if [[ "$continue_anyway" == "false" ]]; then
                echo "Would you like to continue anyway? (yes/no)"
                read -r choice
                if [[ "$choice" != "yes" && "$choice" != "y" ]]; then
                    echo "Operation cancelled by user."
                    exit 1
                fi
                continue_anyway=true
            fi
        else
            echo "Elixir $ELIXIR_VERSION is available."
        fi
    fi
    
    # Check Erlang version availability if not using latest
    if [[ "$ERLANG_VERSION" != "latest" ]]; then
        echo "Checking Erlang $ERLANG_VERSION availability..."
        
        # Check if the specified Erlang version is compatible with Elixir
        # This is a simplification; in reality, you'd need a compatibility matrix
        if ! curl --silent "https://hub.docker.com/v2/repositories/erlang/otp/tags?page_size=100" | grep -q "\"name\":\"$ERLANG_VERSION"; then
            echo "Warning: Erlang version $ERLANG_VERSION may not be available."
            echo "Available Erlang versions (recent):"
            curl --silent "https://hub.docker.com/v2/repositories/erlang/otp/tags?page_size=100" | grep -o '"name":"[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*[^"]*"' | grep -v "alpha\|beta\|rc" | sort -Vr | head -5 | sed 's/"name":"//g' | sed 's/"//g' | sed 's/-.*//g' | uniq | sed 's/^/  - /'
            
            if [[ "$continue_anyway" == "false" ]]; then
                echo "Would you like to continue anyway? (yes/no)"
                read -r choice
                if [[ "$choice" != "yes" && "$choice" != "y" ]]; then
                    echo "Operation cancelled by user."
                    exit 1
                fi
            fi
        else
            echo "Erlang $ERLANG_VERSION is available."
        fi
    fi
    
    # If specific Elixir and Erlang versions are provided, check if the combination exists
    if [[ "$ELIXIR_VERSION" != "latest" && "$ERLANG_VERSION" != "latest" ]]; then
        echo "Checking compatibility of Elixir $ELIXIR_VERSION with Erlang $ERLANG_VERSION..."
        if ! curl --silent "https://hub.docker.com/v2/repositories/library/elixir/tags?page_size=100" | grep -q "\"name\":\"$ELIXIR_VERSION-otp-$ERLANG_VERSION"; then
            echo "Warning: The specific combination of Elixir $ELIXIR_VERSION with Erlang $ERLANG_VERSION may not be available."
            echo "Would you like to use Elixir $ELIXIR_VERSION with the default Erlang version? (yes/no)"
            read -r choice
            if [[ "$choice" != "yes" && "$choice" != "y" ]]; then
                echo "Operation cancelled by user."
                exit 1
            fi
            ERLANG_VERSION="latest"
            echo "Using Elixir $ELIXIR_VERSION with latest compatible Erlang version."
        else
            echo "Combination of Elixir $ELIXIR_VERSION with Erlang $ERLANG_VERSION is available."
        fi
    fi
}

# Prepare docker-compose.yml file to avoid Docker mount issues
prepare_docker_compose() {
    # Create temporary directory
    local tmp_dir=$(mktemp -d)
    
    # Copy modified docker-compose.yml to temporary directory
    # Remove ".:/app" mount to avoid Docker mounting Homebrew directory
    cat "$SCRIPT_DIR/docker-compose.yml" | sed 's|- \.:/app.*||g' > "$tmp_dir/docker-compose.yml"
    
    # Copy Dockerfile and other necessary files
    cp "$SCRIPT_DIR/Dockerfile" "$tmp_dir/Dockerfile"
    cp "$SCRIPT_DIR/docker-entrypoint.sh" "$tmp_dir/docker-entrypoint.sh"
    
    # Return temporary directory path
    echo "$tmp_dir"
}

# Find the project directory and set the correct working directory
find_project_dir() {
    # Default to /app (root of the mounted volume)
    CONTAINER_WORK_DIR="/app"
    
    # Check if we're in a Phoenix project
    if [ -f "$PROJECT_PATH/mix.exs" ]; then
        # This is already a Phoenix project root
        CONTAINER_WORK_DIR="/app"
        echo "Detected Phoenix project in current directory"
    else
        # Check for a single subdirectory that looks like a Phoenix project
        local phoenix_dirs=()
        for dir in "$PROJECT_PATH"/*; do
            if [ -d "$dir" ] && [ -f "$dir/mix.exs" ]; then
                phoenix_dirs+=("$dir")
            fi
        done
        
        if [ ${#phoenix_dirs[@]} -eq 1 ]; then
            # We found exactly one Phoenix project subdirectory
            local project_name=$(basename "${phoenix_dirs[0]}")
            CONTAINER_WORK_DIR="/app/$project_name"
            echo "Detected Phoenix project in subdirectory: $project_name"
        elif [ ${#phoenix_dirs[@]} -gt 1 ]; then
            # Multiple Phoenix projects found
            echo "Error: Multiple Phoenix projects detected in the current directory."
            echo "Please specify which project to use with -p flag, or cd into the specific project directory."
            echo "Available project directories:"
            for dir in "${phoenix_dirs[@]}"; do
                echo "  - $(basename "$dir")"
            done
            exit 1
        else
            # No Phoenix project found
            echo "Error: No Phoenix project detected in the current directory."
            echo "Please run this command from within a Phoenix project directory."
            echo "If this is a new project, run 'phx new [app_name]' first, then 'cd [app_name]'."
            
            # Check if there are any directories containing mix.exs files in parent directories
            local current_path="$PROJECT_PATH"
            local parent_paths=()
            
            # Look up to 3 levels up for mix.exs files
            for i in {1..3}; do
                current_path="$(dirname "$current_path")"
                if [ -f "$current_path/mix.exs" ]; then
                    parent_paths+=("$current_path")
                    break
                else
                    # Check subdirectories one level deep
                    for subdir in "$current_path"/*; do
                        if [ -d "$subdir" ] && [ -f "$subdir/mix.exs" ]; then
                            parent_paths+=("$subdir")
                        fi
                    done
                    
                    if [ ${#parent_paths[@]} -gt 0 ]; then
                        break
                    fi
                fi
            done
            
            if [ ${#parent_paths[@]} -gt 0 ]; then
                echo ""  # Empty line for better readability
                echo "Hint: Found Phoenix project(s) in nearby directories. You might want to 'cd' into one of these:"
                for dir in "${parent_paths[@]}"; do
                    echo "  cd $(realpath --relative-to="$PWD" "$dir")"
                done
            fi
            
            exit 1
        fi
    fi
}

# Run command with safe docker-compose configuration
run_with_safe_compose() {
    local command_args=("$@")
    local has_work_dir=false
    local work_dir="/app"
    
    # Check if -w option is present in the command
    for (( i=0; i<${#command_args[@]}; i++ )); do
        if [[ "${command_args[$i]}" == "-w" ]]; then
            has_work_dir=true
            # Get the working directory value (next argument)
            if [[ $((i+1)) -lt ${#command_args[@]} ]]; then
                work_dir="${command_args[$i+1]}"
            fi
            break
        fi
    done
    
    # Prepare safe docker-compose.yml
    local tmp_dir=$(prepare_docker_compose)
    
    # Create a modified docker-compose file for project-specific commands
    if [[ "$has_work_dir" == "true" && "$work_dir" != "/app" ]]; then
        # Project is in a subdirectory, adjust volume paths
        # Extract project_name from work_dir (/app/project_name)
        local project_name=$(basename "$work_dir")
        
        # Modify volume paths in docker-compose.yml
        echo "Adjusting volume paths for project in subdirectory: $project_name"
        sed -i.bak -e "s|- mix_deps:/app/deps|- mix_deps:$work_dir/deps|g" \
                  -e "s|- build_cache:/app/_build|- build_cache:$work_dir/_build|g" \
                  "$tmp_dir/docker-compose.yml"
        # Remove backup file
        rm -f "$tmp_dir/docker-compose.yml.bak"
    fi
    
    # Run command
    $docker_compose_cmd -f "$tmp_dir/docker-compose.yml" "${command_args[@]}"
    
    # Save exit status
    local exit_status=$?
    
    # Clean up temporary directory
    rm -rf "$tmp_dir"
    
    # Return original command's exit status
    return $exit_status
}

##########################################################
# Main Program Entry
##########################################################

# Define global variables
docker_compose_cmd=""
SCRIPT_DIR=""
PROJECT_PATH="$(pwd)"

# Default values
ELIXIR_VERSION="latest"
ERLANG_VERSION="latest"
PHOENIX_VERSION=""

# Check if Docker and Docker Compose are available
check_docker_compose

# Process command-line arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--phx|--phoenix-version)
            PHOENIX_VERSION="$2"
            shift 2
            ;;
        -e|--ex|--elixir-version)
            ELIXIR_VERSION="$2"
            shift 2
            ;;
        -o|--erl|--erlang-version)
            ERLANG_VERSION="$2"
            shift 2
            ;;
        -p|--path)
            # Resolve relative path to absolute
            TEMP_PATH="$2"
            if [[ "$TEMP_PATH" = /* ]]; then
                PROJECT_PATH="$TEMP_PATH"
            else
                PROJECT_PATH="$(pwd)/$TEMP_PATH"
            fi
            shift 2
            ;;
        debug-path)
            # Debug command to show path information
            echo "===== PHX Path Debug Information ====="
            echo "Current script location: $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
            echo "Current working directory: $(pwd)"
            # Check possible locations for docker-compose.yml
            echo "Checking possible config file locations:"
            script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
            echo "  - $script_dir ($([ -d "$script_dir" ] && echo 'directory exists' || echo 'directory does not exist'))"
            echo "    * docker-compose.yml $([ -f "$script_dir/docker-compose.yml" ] && echo 'exists' || echo 'does not exist')"
            parent_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")/../" 2>/dev/null && pwd)
            echo "  - $parent_dir ($([ -d "$parent_dir" ] && echo 'directory exists' || echo 'directory does not exist'))"
            echo "    * docker-compose.yml $([ -f "$parent_dir/docker-compose.yml" ] && echo 'exists' || echo 'does not exist')"
            homebrew_cellar_dir_arm="/opt/homebrew/Cellar/phx"
            echo "  - $homebrew_cellar_dir_arm ($([ -d "$homebrew_cellar_dir_arm" ] && echo 'directory exists' || echo 'directory does not exist'))"
            echo "    * docker-compose.yml $([ -f "$homebrew_cellar_dir_arm/docker-compose.yml" ] && echo 'exists' || echo 'does not exist')"
            homebrew_cellar_dir_intel="/usr/local/Cellar/phx"
            echo "  - $homebrew_cellar_dir_intel ($([ -d "$homebrew_cellar_dir_intel" ] && echo 'directory exists' || echo 'directory does not exist'))"
            homebrew_etc_dir_arm="/opt/homebrew/etc/phx"
            echo "  - $homebrew_etc_dir_arm ($([ -d "$homebrew_etc_dir_arm" ] && echo 'directory exists' || echo 'directory does not exist'))"
            homebrew_etc_dir_intel="/usr/local/etc/phx"
            echo "  - $homebrew_etc_dir_intel ($([ -d "$homebrew_etc_dir_intel" ] && echo 'directory exists' || echo 'directory does not exist'))"
            if [ -d "$homebrew_cellar_dir_arm" ]; then
                echo "Checking all versions under $homebrew_cellar_dir_arm:"
                for version_dir in "$homebrew_cellar_dir_arm"/*; do
                    echo "  - $version_dir ($([ -d "$version_dir" ] && echo 'directory exists' || echo 'directory does not exist'))"
                    echo "    * docker-compose.yml $([ -f "$version_dir/docker-compose.yml" ] && echo 'exists' || echo 'does not exist')"
                done
            fi
            if [ -d "$homebrew_cellar_dir_intel" ]; then
                echo "Checking all versions under $homebrew_cellar_dir_intel:"
                for version_dir in "$homebrew_cellar_dir_intel"/*; do
                    echo "  - $version_dir ($([ -d "$version_dir" ] && echo 'directory exists' || echo 'directory does not exist'))"
                    echo "    * docker-compose.yml $([ -f "$version_dir/docker-compose.yml" ] && echo 'exists' || echo 'does not exist')"
                done
            fi
            echo "Docker compose file check: $(ls -la $SCRIPT_DIR/docker-compose.yml 2>&1)"
            
            # Exit after showing debug info
            exit 0
            ;;
        update-versions)
            # Update .tool-versions file in current directory or specified path
            echo "Exporting environment variables for .tool-versions update"
            
            # Export environment variables
            export ELIXIR_VERSION
            export ERLANG_VERSION
            export PHOENIX_VERSION
            
            # Use PROJECT_PATH if specified, otherwise use current directory
            # PROJECT_PATH is initially set to current directory, but can be overridden with -p/--path
            update_tool_versions "$PROJECT_PATH"
            exit 0
            ;;
        *)
            break
            ;;
    esac
done

# Get absolute path of script
INITIAL_SCRIPT_PATH=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# Set up possible configuration file paths
CONFIG_PATHS=(
    "$INITIAL_SCRIPT_PATH"                # 1. Current script directory
    "$INITIAL_SCRIPT_PATH/.."             # 2. Parent directory of current script
)

# Check if this is a Homebrew installation
if [[ "$INITIAL_SCRIPT_PATH" == "/opt/homebrew/bin" || "$INITIAL_SCRIPT_PATH" == "/usr/local/bin" ]]; then
    echo "Detected Homebrew installation, searching for configuration files..."
    
    # Determine Homebrew prefix based on architecture
    if [[ "$INITIAL_SCRIPT_PATH" == "/opt/homebrew/bin" ]]; then
        BREW_PREFIX="/opt/homebrew"
    else
        BREW_PREFIX="/usr/local"
    fi
    
    # Add standard Homebrew locations
    CONFIG_PATHS+=(
        "$BREW_PREFIX/etc/phx"                # 3. Standard Homebrew config directory
        "$BREW_PREFIX/opt/phx"                # 4. Homebrew opt directory
    )
    
    # Add all possible Cellar version directories
    if [[ -d "$BREW_PREFIX/Cellar/phx" ]]; then
        for version_dir in "$BREW_PREFIX/Cellar/phx"/*; do
            if [[ -d "$version_dir" ]]; then
                CONFIG_PATHS+=("$version_dir")    # 5. Specific version Cellar directory
            fi
        done
    fi
elif [[ "$INITIAL_SCRIPT_PATH" == "/opt/homebrew/Cellar/phx"* ]] || [[ "$INITIAL_SCRIPT_PATH" == "/usr/local/Cellar/phx"* ]]; then
    # For direct Cellar installation
    # First determine if we're using Apple Silicon (/opt/homebrew) or Intel (/usr/local)
    if [[ "$INITIAL_SCRIPT_PATH" == "/opt/homebrew/"* ]]; then
        BREW_PREFIX="/opt/homebrew"
    else
        BREW_PREFIX="/usr/local"
    fi
    
    # Add the Cellar package directory
    # Get the relative path to the phx binary within the Cellar structure
    REL_PATH=${INITIAL_SCRIPT_PATH#$BREW_PREFIX/Cellar/}
    # Extract just the package name and version (should be something like "phx/0.1.3")
    PKG_PATH=$(echo "$REL_PATH" | cut -d/ -f1-2)
    # Add this path to our search list
    CONFIG_PATHS+=("$BREW_PREFIX/Cellar/$PKG_PATH")
fi

# Search for docker-compose.yml file
SCRIPT_DIR=""
FOUND_CONFIG=false

for path in "${CONFIG_PATHS[@]}"; do
    if [[ -f "$path/docker-compose.yml" ]]; then
        SCRIPT_DIR="$path"
        FOUND_CONFIG=true
        echo "Found configuration file: $SCRIPT_DIR/docker-compose.yml"
        break
    fi
done

if [[ "$FOUND_CONFIG" != true ]]; then
    echo "Error: Unable to find docker-compose.yml configuration file!"
    echo "Checked the following paths:"
    for path in "${CONFIG_PATHS[@]}"; do
        echo "  - $path/docker-compose.yml"
    done
    exit 1
fi

# Check availability of specified versions before any operation that would use them
if [[ "$1" == "new" || ( "$1" != "help" && "$1" != "-h" && "$1" != "--help" ) ]]; then
    check_versions_availability
fi

# Check if it's a command to create a new project
if [[ "$1" == "new" ]]; then
    # Get application name and other options from parameters
    APP_NAME=$2
    shift 2
    
    # Store remaining parameters for passing to mix phx.new, excluding our custom parameters
    CUSTOM_PARAMS=()
    for param in "$@"; do
        # Skip any -p/--path parameter and its value since they are for phx script, not for mix phx.new
        if [[ "$param" == "-p" || "$param" == "--path" ]]; then
            # Skip this parameter (will be processed separately)
            shift
            shift  # Also skip the value
            continue
        fi
        
        # If we already processed a path parameter, skip the value
        if [[ "$SKIP_NEXT" == "true" ]]; then
            SKIP_NEXT=false
            continue
        fi
        
        # Add other parameters to be passed to mix phx.new
        CUSTOM_PARAMS+=("$param")
    done

    # If Phoenix version is not specified, prompt user to input
    if [[ -z "$PHOENIX_VERSION" ]]; then
        echo "Please enter the Phoenix framework version to use (e.g.: 1.7.10):"
        read -r PHOENIX_VERSION
        
        if [[ -z "$PHOENIX_VERSION" ]]; then
            echo "Error: Phoenix framework version must be specified"
            exit 1
        fi
    fi

    # Setup user permissions
    setup_user_permissions

    # Export environment variables
    export PHOENIX_VERSION
    export ELIXIR_VERSION
    export ERLANG_VERSION

    # Build Docker image from script directory
    echo "Building Phoenix $PHOENIX_VERSION environment..."
    echo "Using Elixir $ELIXIR_VERSION and Erlang $ERLANG_VERSION (if 'latest' is specified, the newest version will be used)"
    run_with_safe_compose build

    # Target path permission check
    if [ ! -d "$PROJECT_PATH" ]; then
        if ! mkdir -p "$PROJECT_PATH" 2>/dev/null; then
            echo "Error: Cannot create directory '$PROJECT_PATH'. Please ensure you have sufficient permissions."
            exit 1
        fi
    elif [ ! -w "$PROJECT_PATH" ]; then
        echo "Error: You don't have write permission for '$PROJECT_PATH'. Please use another path or change permissions."
        exit 1
    fi
    
    # Switch to specified directory
    cd "$PROJECT_PATH" || { echo "Error: Unable to switch to '$PROJECT_PATH'"; exit 1; }

    # Ensure directory doesn't exist, otherwise mix phx.new will fail
    if [[ -d "$APP_NAME" ]]; then
        echo "Error: Directory '$APP_NAME' already exists"
        exit 1
    fi

    # Create temporary directory for project creation
    echo "Creating new Phoenix application '$APP_NAME'..."
    TMP_DIR=$(mktemp -d)
    echo "Using temporary directory: $TMP_DIR"

    # Use safe docker-compose with temporary directory for cleaner project creation
    echo "Initialization complete, preparing to execute command: bash -c echo Y | mix phx.new $APP_NAME ${CUSTOM_PARAMS[*]}"
    run_with_safe_compose run --rm -t -v "$TMP_DIR:/app" phoenix bash -c "echo Y | mix phx.new $APP_NAME ${CUSTOM_PARAMS[*]}"
    
    # Check if command executed successfully
    if [ $? -ne 0 ]; then
        echo "Error: Unable to create Phoenix project, possibly due to Docker mount issues."
        rm -rf "$TMP_DIR"
        exit 1
    fi

    # Check if project directory exists in temporary directory
    if [ ! -d "$TMP_DIR/$APP_NAME" ]; then
        echo "Error: Project directory '$APP_NAME' not found in temporary directory."
        rm -rf "$TMP_DIR"
        exit 1
    fi

    # Ensure the target directory doesn't exist already
    if [ -d "$PROJECT_PATH/$APP_NAME" ]; then
        echo "Error: Directory '$PROJECT_PATH/$APP_NAME' already exists."
        rm -rf "$TMP_DIR"
        exit 1
    fi

    # Copy only the project directory to the target path
    echo "Copying project from temporary directory to $PROJECT_PATH/$APP_NAME..."
    mkdir -p "$PROJECT_PATH"
    cp -R "$TMP_DIR/$APP_NAME" "$PROJECT_PATH/"
    rm -rf "$TMP_DIR"

    # Keep the project files in the app_name directory structure
    echo "Project files are organized under $PROJECT_PATH/$APP_NAME/"

    # Modify the generated database configuration to use environment variables
    echo "Configuring database connection..."
    sed -i '' 's/hostname: "localhost"/hostname: System.get_env("DATABASE_HOST", "localhost")/' "$PROJECT_PATH/$APP_NAME/config/dev.exs"
    sed -i '' 's/username: "postgres"/username: System.get_env("DATABASE_USER", "postgres")/' "$PROJECT_PATH/$APP_NAME/config/dev.exs"
    sed -i '' 's/password: "postgres"/password: System.get_env("DATABASE_PASSWORD", "postgres")/' "$PROJECT_PATH/$APP_NAME/config/dev.exs"
    
    # Ensure live_reload is enabled in configuration
    if ! grep -q "live_reload:" "$PROJECT_PATH/$APP_NAME/config/dev.exs"; then
        echo "Warning: live_reload configuration not found in dev.exs, may need to be added manually."
    fi
    
    # Create .tool-versions file in the app directory
    echo "Creating .tool-versions file..."
    update_tool_versions "$PROJECT_PATH/$APP_NAME"
    
    echo "Phoenix application '$APP_NAME' created successfully!"
    echo "To start your Phoenix server:"
    echo "  cd $APP_NAME"
    echo "  phx deps.get"
    echo "  phx ecto.create"
    echo "  phx phx.server"
else
    # Check if no command was provided
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    # Setup user permissions
    setup_user_permissions

    # Export environment variables
    export PHOENIX_VERSION
    export ELIXIR_VERSION
    export ERLANG_VERSION

    # Determine if we can use the project directory directly
    # If a default path is provided, it will be mapped to /app in the container
    if [[ "$1" == "bash" ]]; then
        # Detect project directory structure for bash
        find_project_dir
        
        # Enter container bash directly
        run_with_safe_compose run --rm -v "$PROJECT_PATH:/app" -w "$CONTAINER_WORK_DIR" phoenix bash
    elif [[ "$1" == "iex" ]] && [[ "$#" == 1 ]]; then
        # Detect project directory structure for iex
        find_project_dir
        
        # Start IEx shell
        run_with_safe_compose run --rm -v "$PROJECT_PATH:/app" -w "$CONTAINER_WORK_DIR" phoenix iex
    elif [[ "$1" == "iex.phx" ]] || [[ "$1" == "iex:phx" ]]; then
        # Detect project directory structure for iex.phx
        find_project_dir
        
        # Start IEx and load Phoenix application
        run_with_safe_compose run --rm --service-ports -v "$PROJECT_PATH:/app" -w "$CONTAINER_WORK_DIR" -e DATABASE_HOST=host.docker.internal phoenix iex -S mix phx.server
    else
        # Check if it's an iex command
        if [[ "$1" == "iex" ]] && [[ "$#" -gt 1 ]]; then
            # Detect project directory structure for iex with params
            find_project_dir
            
            # Execute iex directly but preserve additional options
            run_with_safe_compose run --rm -v "$PROJECT_PATH:/app" -w "$CONTAINER_WORK_DIR" phoenix "$@"
        elif [[ "$1" == "phx.server" ]]; then
            # Detect project directory structure
            find_project_dir
            
            # Start Phoenix server
            run_with_safe_compose run --rm --service-ports -v "$PROJECT_PATH:/app" -w "$CONTAINER_WORK_DIR" -e DATABASE_HOST=host.docker.internal phoenix mix phx.server
        else
            # Detect project directory structure
            find_project_dir
            
            # Execute all other mix commands
            run_with_safe_compose run --rm -v "$PROJECT_PATH:/app" -w "$CONTAINER_WORK_DIR" -e DATABASE_HOST=host.docker.internal phoenix mix "$@"
        fi
    fi
fi